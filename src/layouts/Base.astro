---
import type { Lang } from "@/define";
import "@akimeaki/reset-css";
import "@/panda.css";
import "@/global.scss";
import { getCachedContents } from "@/libs/microcms";
import type { DotIllustTag } from "@/types";
import { css } from "@/styled-system/css";
import GoogleAds from "@/components/atoms/GoogleAds";
import Sidebar from "@/components/organisms/Sidebar";
import { i18n } from "@/libs/i18n";
import { getText } from "@/libs/getI18n";
import { formatTagList } from "@/libs/format-dotlist";
import { getLangPath } from "@/libs/lang-path";

interface Props {
	title?: string;
	description?: string;
	ogType?: string;
	ogImage?: string;
	notFound?: boolean;
	canonical?: string;
	publishedAt?: string | undefined;
	jsonld?: unknown[];
	lang: Lang;
}

const path = Astro.url.pathname.replace(/^\//, "").replace(/\.html$/, "");

const { lang } = Astro.props;

const { translateData } = await i18n(lang);

const {
	title,
	description = `${getText(translateData, "fixedDescription")}${getText(translateData, "_description")}`,
	ogType = "article",
	ogImage = `${Astro.site}default-ogp.png`,
	notFound = false,
	canonical = `${Astro.site}${path}`,
	jsonld = []
} = Astro.props;

const pageTitle =
	title === undefined ? getText(translateData, "serviceName") : `${title} - ${getText(translateData, "serviceName")}`;

const tags = formatTagList(await getCachedContents<DotIllustTag>("tags"));

const schema =
	jsonld.length === 0
		? [
				{
					"@context": "https://schema.org",
					"@type": "WebSite",
					name: getText(translateData, "serviceName"),
					alternateName: getText(translateData, "serviceName"),
					description,
					url: String(Astro.site),
					publisher: {
						"@type": "Organization",
						name: "篝之鼠",
						url: "https://kagari.aki.wtf/",
						logo: {
							"@type": "ImageObject",
							url: "https://kagari.aki.wtf/default-ogp.png",
							width: 512,
							height: 512
						}
					},
					image: {
						"@type": "ImageObject",
						url: `${Astro.site}default-ogp.png`,
						width: 512,
						height: 512
					}
				}
			]
		: jsonld;
---

<html lang={lang} prefix="og: https://ogp.me/ns#">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="viewport" content="width=device-width" />
		<meta name="description" content={description} />
		<meta name="format-detection" content="email=no,telephone=no,address=no" />
		<meta name="author" content="彩季" />
		<meta name="generator" content={Astro.generator} />
		<meta property="og:url" content={`${Astro.site}${path}`} />
		<meta property="og:type" content={ogType} />
		<meta property="og:title" content={title ?? getText(translateData, "serviceName")} />
		<meta property="og:description" content={description} />
		<meta property="og:site_name" content={getText(translateData, "serviceName")} />
		<meta property="og:image" content={ogImage} />
		<meta name="twitter:card" content="summary" />
		<meta name="twitter:site" content="@Akime_Aki" />
		<meta name="twitter:title" content={title ?? getText(translateData, "serviceName")} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={ogImage} />
		<meta name="twitter:image" content={ogImage} />
		{notFound && <meta name="robots" content="noindex" />}
		<!-- Google Tag Manager -->
		<script is:inline>
			// prettier-ignore
			(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});const f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
			})(window,document,'script','dataLayer','GTM-M74W225P');
		</script>
		<!-- End Google Tag Manager -->
		<link rel="icon" href={`${Astro.site}favicon.ico`} />
		<link rel="sitemap" href={`${Astro.site}sitemap-index.xml`} />
		<script
			async
			src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6914867149724943"
			crossorigin="anonymous"
			is:inline></script>
		{
			schema.map((item) => {
				return <script type="application/ld+json" is:inline set:html={JSON.stringify(item)} />;
			})
		}
		<title>{pageTitle}</title>
		{!notFound && <link rel="canonical" href={canonical} />}
	</head>
	<body>
		<!-- Google Tag Manager (noscript) -->
		<noscript>
			<iframe
				src="https://www.googletagmanager.com/ns.html?id=GTM-M74W225P"
				height="0"
				width="0"
				style="display:none;visibility:hidden"></iframe>
		</noscript>
		<!-- End Google Tag Manager (noscript) -->

		<div
			class={css`
				display: flex;
				flex-direction: column;
			`}
		>
			<div
				class={css`
					flex: 1;
				`}
			>
				<header
					class={css`
						position: relative;
						display: flex;
						flex-direction: column;
						align-items: center;
						gap: 10px;
						justify-content: center;
						background-color: #ebae7e;
						padding: 30px 0;
						border: 7px solid #492b18;
					`}
				>
					<span
						class={css`
							position: absolute;
							top: 17px;
							left: 17px;
							content: "";
							display: block;
							width: 20px;
							height: 20px;
							background-color: #613e28;
						`}></span>
					<span
						class={css`
							position: absolute;
							top: 10px;
							left: 10px;
							content: "";
							display: block;
							width: 20px;
							height: 20px;
							background-color: #492b18;
						`}></span>

					<span
						class={css`
							position: absolute;
							bottom: 10px;
							right: 10px;
							content: "";
							display: block;
							width: 20px;
							height: 20px;
							background-color: #613e28;
						`}></span>
					<span
						class={css`
							position: absolute;
							bottom: 17px;
							right: 17px;
							content: "";
							display: block;
							width: 20px;
							height: 20px;
							background-color: #492b18;
						`}></span>
					<a
						aria-label={getText(translateData, "headerLinkAriaLabel")}
						class={css`
							text-decoration: none;
						`}
						href={getLangPath("/", lang)}
					>
						<h1
							class={css`
								display: inline-block;
								font-size: 30px;
								font-weight: bold;
								color: #86664f;
								text-shadow:
									1px 1px 0 #492b18,
									-1px -1px 0 #492b18,
									-1px 1px 0 #492b18,
									1px -1px 0 #492b18,
									0px 1px 0 #492b18,
									-1px 0 #492b18,
									-1px 0 0 #492b18,
									1px 0 0 #492b18;
							`}
						>
							{getText(translateData, "serviceName")}
						</h1>
					</a>
					<p
						class={css`
							text-align: center;
							color: #313131;

							@media (max-width: 700px) {
								font-size: 14px;
							}
						`}
					>
						{getText(translateData, "headerSubTitle")}
					</p>
				</header>
				<main
					class={css`
						padding: 50px 10px;
						display: flex;
						gap: 30px;
						max-width: 1300px;
						width: 100%;
						margin: 0 auto;

						@media (max-width: 1130px) {
							flex-direction: column;
						}
					`}
				>
					<div>
						<Sidebar tags={tags} translateData={translateData} lang={lang} client:load />
					</div>
					<div
						class={css`
							flex: 1;
							min-width: 0;
						`}
					>
						<div
							class={css`
								position: relative;
							`}
						>
							<div><slot /></div>
							<div
								class={css`
									padding-top: 70px;
									overflow: hidden;
								`}
							>
								<GoogleAds slot="6502850359" />
							</div>
						</div>
					</div>
				</main>
			</div>

			<footer
				class={css`
					display: flex;
					justify-content: center;
					gap: 10px;
					flex-direction: column;
					align-items: center;
					background-color: #5b4942;
					height: 130px;
					color: white;
					user-select: none;

					* {
						color: white;
					}
				`}
			>
				<div
					class={css`
						display: flex;
						align-items: center;
						gap: 20px;
						font-family: "BestTenCRT";

						* {
							font-family: "BestTenCRT";
						}
					`}
				>
					<div>Created by</div>
					<a
						aria-label="篝之鼠"
						href="https://kagari.aki.wtf"
						target="_blank"
						class={css`
							display: flex;
							align-items: center;
							gap: 10px;
							text-decoration: none;

							&:hover {
								color: #9deb83;

								* {
									color: #9deb83;
								}
							}
						`}
					>
						<div>篝之鼠</div>
						<img
							width={51}
							height={20}
							class={css`
								height: 20px;
								gap: 20px;
								display: block;
							`}
							alt="篝之鼠"
							src="https://r2.aki.wtf/kagari-rat.png"
							loading="lazy"
						/>
						<div>かがりのす</div>
					</a>
				</div>
				<div
					class={css`
						display: flex;
						align-items: center;
						gap: 3px;

						a {
							font-size: 14px;
						}

						a:hover {
							color: #9deb83;
						}
					`}
				>
					<span>{getText(translateData, "footerTranslator")}</span>
					<span
						class={css`
							font-family: "BestTenCRT";
							transform: translateY(-1px);

							&:lang(zh-cn) {
								transform: translateY(-3px);
							}

							&:lang(zh-tw) {
								transform: translateY(-3px);
							}
						`}
					>
						ノブ
					</span>
				</div>
				<div
					class={css`
						display: flex;
						align-items: center;
						gap: 20px;

						a {
							font-size: 14px;
						}

						a:hover {
							color: #9deb83;
						}
					`}
				>
					<a
						aria-label={getText(translateData, "footerUpdate")}
						href="https://blog.aki.wtf/categories/pixel-gives"
						target="_blank"
					>
						{getText(translateData, "footerUpdate")}
					</a>
					<a aria-label={getText(translateData, "footerContact")} href={getLangPath("/contact", lang)}>
						{getText(translateData, "footerContact")}
					</a>
				</div>
			</footer>
		</div>
	</body>
</html>

<script>
	import { pageLangList } from "@/define";
	import { getCurrentLanguage } from "@/libs/get-language";
	import { getCurrentPathList } from "@/libs/lang-path";

	const currentLanguage = getCurrentLanguage();
	const currentPath: string[] = getCurrentPathList();

	const option = "; max-age=2592000; path=/";
	if (currentLanguage !== "") {
		document.cookie = `language="${currentLanguage}"${option}`;

		if (currentLanguage !== "ja") {
			// 言語判定が日本語じゃない時

			// eslint-disable-next-line @typescript-eslint/no-explicit-any
			if (currentPath[1] !== undefined && pageLangList.includes(currentPath[1] as any)) {
				// パスが日本語じゃない時

				if (currentLanguage !== currentPath[1]) {
					let redirectPath = currentPath.slice(2).join("/");
					if (redirectPath !== "") {
						redirectPath = "/" + redirectPath;
					}

					window.location.href = "/" + currentLanguage + redirectPath;
				}
			} else {
				// パスが日本語の時

				let redirectPath = currentPath.slice(1).join("/");
				if (redirectPath !== "") {
					redirectPath = "/" + redirectPath;
				}
				window.location.href = "/" + currentLanguage + redirectPath;
			}
		} else {
			// 言語判定が日本語の時

			// eslint-disable-next-line @typescript-eslint/no-explicit-any
			if (currentPath[1] !== undefined && pageLangList.includes(currentPath[1] as any)) {
				// パスが日本語じゃない時

				if (currentLanguage !== currentPath[1]) {
					let redirectPath = currentPath.slice(2).join("/");
					if (redirectPath === "") {
						redirectPath = "/";
					} else {
						redirectPath = "/" + redirectPath;
					}

					window.location.href = redirectPath;
				}
			}
		}
	}
</script>
