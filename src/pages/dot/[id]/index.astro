---
import Base from "@/layouts/Base.astro";
import Page from "./_page";
import type { DotIllust } from "@/types";
import { getCachedContents } from "@/libs/microcms";
import type { GetStaticPaths } from "astro";
import { dotJsonLd } from "@/libs/jsonld";
import { formatDotList } from "@/libs/format-dotlist";
import { copy } from "@/libs/copy-object";
import { fixedDescription, serviceTitle } from "@/define";

export const getStaticPaths = (async () => {
	const allDots = await formatDotList(await getCachedContents<DotIllust>("dot"));

	return allDots.map((content) => {
		let sameTag1Dots = allDots.filter((item) => {
			if (item.id === content.id) {
				return false;
			}

			if (content.tags[0] !== undefined) {
				for (const tag of item.tags) {
					if (tag.id === content.tags[0].id) {
						return true;
					}
				}
			}

			return false;
		});
		sameTag1Dots.length = 15;
		sameTag1Dots = sameTag1Dots.filter(Boolean);

		const sameTag1DotsInSameTag2Dots = sameTag1Dots.filter((item) => {
			if (item.id === content.id) {
				return false;
			}

			if (content.tags[1] !== undefined) {
				for (const tag of item.tags) {
					if (tag.id === content.tags[1].id) {
						return true;
					}
				}
			}

			return false;
		});

		let sameTag2Dots = allDots.filter((item) => {
			if (item.id === content.id) {
				return false;
			}

			if (content.tags[1] !== undefined) {
				for (const tag of item.tags) {
					if (tag.id === content.tags[1].id) {
						return true;
					}
				}
			}

			return false;
		});

		const filterdSameTag2Dots = copy<typeof sameTag2Dots>(sameTag2Dots).filter((dot) => {
			const dot1Ids = sameTag1DotsInSameTag2Dots.map((dot) => dot.id);

			return !dot1Ids.includes(dot.id);
		});

		sameTag2Dots = [...filterdSameTag2Dots, ...sameTag1DotsInSameTag2Dots];
		sameTag2Dots.length = 15;
		sameTag2Dots = sameTag2Dots.filter(Boolean);

		return {
			params: {
				id: content.id
			},
			props: {
				dot: content,
				sameTag1Dots,
				sameTag2Dots
			}
		};
	});
}) satisfies GetStaticPaths;

const { dot, sameTag1Dots, sameTag2Dots } = Astro.props;

let image: string | undefined = undefined;
if (dot.illust.size === 32) {
	image = `${dot.illust.url}?w=512&q=100&px=${16}`;
}

if (dot.illust.size === 16) {
	image = `${dot.illust.url}?w=512&q=100&px=${32}`;
}

if (image === undefined) {
	return;
}

const schema = [];
if (dot.illust.size === 32) {
	schema.push(dotJsonLd(Astro, image, dot.title));
}

if (dot.illust.size === 16) {
	schema.push(dotJsonLd(Astro, image, dot.title));
}

schema.push({
	"@context": "http://schema.org",
	"@type": "BreadcrumbList",
	name: "パンくずリスト",
	itemListElement: [
		{
			"@type": "ListItem",
			position: 1,
			item: {
				"@id": Astro.site,
				name: serviceTitle
			}
		},
		{
			"@type": "ListItem",
			position: 2,
			item: {
				"@id": `${Astro.site}dot/page/1`,
				name: "ドット絵"
			}
		},
		{
			"@type": "ListItem",
			position: 3,
			item: {
				"@id": `${Astro.site}dot/${dot.id}`,
				name: dot.title
			}
		}
	]
});
---

<Base
	title={dot.title}
	ogImage={image}
	description={`${dot.title}のドット絵です。${fixedDescription}`}
	publishedAt={dot.publishedAt}
	jsonld={[...schema]}
>
	<Page client:load dot={dot} sameTagDots={[sameTag1Dots, sameTag2Dots]} />
</Base>
