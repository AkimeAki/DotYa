---
import Base from "@/layouts/Base.astro";
import Page from "./_page";
import type { DotIllust } from "@/types";
import { getCachedContents } from "@/libs/microcms";
import type { GetStaticPaths } from "astro";
import { dotJsonLd } from "@/libs/jsonld";
import { formatDotList } from "@/libs/format-dotlist";

export const getStaticPaths = (async () => {
	const allDots = await formatDotList(await getCachedContents<DotIllust>("dot"));

	return allDots.map((content) => ({
		params: {
			id: content.id
		},
		props: {
			dot: content,
			sameTag1Dots: allDots.filter((item) => {
				if (item.id === content.id) {
					return false;
				}

				if (content.tags[0] !== undefined) {
					for (const tag of item.tags) {
						if (tag.id === content.tags[0].id) {
							return true;
						}
					}
				}

				return false;
			}),
			sameTag2Dots: allDots.filter((item) => {
				if (item.id === content.id) {
					return false;
				}

				if (content.tags[1] !== undefined) {
					for (const tag of item.tags) {
						if (tag.id === content.tags[1].id) {
							return true;
						}
					}
				}

				return false;
			})
		}
	}));
}) satisfies GetStaticPaths;

const { dot, sameTag1Dots, sameTag2Dots } = Astro.props;

let image: string | undefined = undefined;
if (dot.illust.size === 32) {
	image = `${dot.illust.url}?w=512&q=100&px=${16}`;
}

if (dot.illust.size === 16) {
	image = `${dot.illust.url}?w=512&q=100&px=${32}`;
}

if (image === undefined) {
	return;
}

const schema = [];
if (dot.illust.size === 32) {
	schema.push(dotJsonLd(Astro, image, dot.title));
}

if (dot.illust.size === 16) {
	schema.push(dotJsonLd(Astro, image, dot.title));
}
---

<Base
	title={dot.title}
	ogImage={image}
	description={`${dot.title}のドット絵です。「どっとや」はドット絵のフリーイラスト素材屋さんです。`}
	publishedAt={dot.publishedAt}
	jsonld={[...schema]}
>
	<Page client:load dot={dot} sameTagDots={[sameTag1Dots, sameTag2Dots]} />
</Base>
