---
import Base from "@/layouts/Base.astro";
import type { DotIllust } from "@/types";
import { getCachedContents } from "@/libs/microcms";
import type { GetStaticPaths } from "astro";
import { dotJsonLd } from "@/libs/jsonld";
import { formatDotList } from "@/libs/format-dotlist";
import { copy } from "@/libs/copy-object";
import { fixedDescription, serviceTitle } from "@/define";
import { css } from "@/styled-system/css";
import Title from "@/components/atoms/Title";
import PictureFrame from "@/components/atoms/PictureFrame";
import PixelButton from "@/components/atoms/PixelButton";
import DownloadButton from "@/components/molecules/DownloadButton";
import ShareButton from "@/components/atoms/ShareButton";
import GoogleAds from "@/components/atoms/GoogleAds";
import DotList from "@/components/templates/DotList";
import Button from "@/components/atoms/Button";

export const getStaticPaths = (async () => {
	const allDots = await formatDotList(await getCachedContents<DotIllust>("dot"));

	return allDots.map((content) => {
		let sameTag1Dots = allDots.filter((item) => {
			if (item.id === content.id) {
				return false;
			}

			if (content.tags[0] !== undefined) {
				for (const tag of item.tags) {
					if (tag.id === content.tags[0].id) {
						return true;
					}
				}
			}

			return false;
		});
		sameTag1Dots.length = 15;
		sameTag1Dots = sameTag1Dots.filter(Boolean);

		const sameTag1DotsInSameTag2Dots = sameTag1Dots.filter((item) => {
			if (item.id === content.id) {
				return false;
			}

			if (content.tags[1] !== undefined) {
				for (const tag of item.tags) {
					if (tag.id === content.tags[1].id) {
						return true;
					}
				}
			}

			return false;
		});

		let sameTag2Dots = allDots.filter((item) => {
			if (item.id === content.id) {
				return false;
			}

			if (content.tags[1] !== undefined) {
				for (const tag of item.tags) {
					if (tag.id === content.tags[1].id) {
						return true;
					}
				}
			}

			return false;
		});

		const filterdSameTag2Dots = copy<typeof sameTag2Dots>(sameTag2Dots).filter((dot) => {
			const dot1Ids = sameTag1DotsInSameTag2Dots.map((dot) => dot.id);

			return !dot1Ids.includes(dot.id);
		});

		sameTag2Dots = [...filterdSameTag2Dots, ...sameTag1DotsInSameTag2Dots];
		sameTag2Dots.length = 15;
		sameTag2Dots = sameTag2Dots.filter(Boolean);

		return {
			params: {
				id: content.id
			},
			props: {
				dot: content,
				sameTag1Dots,
				sameTag2Dots
			}
		};
	});
}) satisfies GetStaticPaths;

const { dot, sameTag1Dots, sameTag2Dots } = Astro.props;

let image: string | undefined = undefined;
if (dot.illust.size === 32) {
	image = `${dot.illust.url}?w=512&q=100&px=${16}`;
}

if (image === undefined) {
	return;
}

const schema = [];
if (dot.illust.size === 32) {
	schema.push(dotJsonLd(image, dot.title));
}

schema.push({
	"@context": "http://schema.org",
	"@type": "BreadcrumbList",
	name: "パンくずリスト",
	itemListElement: [
		{
			"@type": "ListItem",
			position: 1,
			item: {
				"@id": Astro.site,
				name: serviceTitle
			}
		},
		{
			"@type": "ListItem",
			position: 2,
			item: {
				"@id": `${Astro.site}page/1`,
				name: "ドット絵"
			}
		},
		{
			"@type": "ListItem",
			position: 3,
			item: {
				"@id": `${Astro.site}dot/${dot.id}`,
				name: `${dot.title}のドット絵`
			}
		}
	]
});

const sameTagDots = [sameTag1Dots, sameTag2Dots];
---

<Base
	title={`${dot.title}のドット絵`}
	ogImage={image}
	description={`${dot.title}のドット絵です。${fixedDescription}`}
	publishedAt={dot.publishedAt}
	jsonld={[...schema]}
>
	<div
		class={css`
			display: flex;
			flex-direction: column;
			gap: 30px;
		`}
	>
		<Title>{dot.title}</Title>
		<div
			class={css`
				display: flex;
				flex-direction: column;
				gap: 30px;
			`}
		>
			<div
				class={css`
					display: flex;
					flex-direction: column;
					gap: 10px;
					align-items: flex-start;
				`}
			>
				<div
					class={css`
						display: flex;
						flex-wrap: wrap;
						align-items: flex-end;
						user-select: none;
						pointer-events: none;
						gap: 20px;
					`}
				>
					<img
						class={css`
							display: none;
						`}
						src={dot.illust.url}
						alt={dot.title}
					/>
					{
						[256, 128, 64, 32].map((pixel) => {
							return <PictureFrame size={pixel} src={dot.illust.url} alt={dot.title} />;
						})
					}
				</div>
			</div>
			{
				/* {dot.dot64 !== undefined && (
					<div
						class={css`
							display: flex;
							flex-direction: column;
							gap: 10px;
							align-items: flex-start;
						`}
					>
						<Title size="small" h={3}>
							64px
						</Title>
						<div
							class={css`
								display: flex;
								flex-wrap: wrap;
								align-items: flex-end;
								user-select: none;
								pointer-events: none;
								gap: 20px;
							`}
						>
							{[256, 128, 64, 32].map((pixel) => {
								return (
									<PictureFrameDom key={pixel} size={pixel} width={64} dom={dot.dot64?.dom ?? ""} />
								);
							})}
						</div>
					</div>
				)} */
			}
			<div
				class={css`
					display: flex;
					gap: 5px;
					flex-direction: column;
				`}
			>
				<p>
					サイズ：{dot.illust.size}px × {dot.illust.size}px
				</p>
				<div
					class={css`
						display: flex;
						gap: 5px;
						flex-wrap: wrap;
						align-items: baseline;
					`}
				>
					タグ：
					{
						dot.tags.map((tag) => {
							return (
								<PixelButton href={`/tags/${tag.id}`} color="#4d3d36">
									{tag.name}
								</PixelButton>
							);
						})
					}
				</div>
			</div>

			<DownloadButton dot={dot} client:load />
		</div>

		<div
			class={css`
				display: flex;
				gap: 5px;
				flex-wrap: wrap;
			`}
		>
			<ShareButton
				target="_blank"
				icon="/icons/x.png"
				size={18}
				alt="Xでシェア"
				serviceName="X"
				href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(dot.title)}&url=${encodeURIComponent(`https://pixel.gives/dot/${dot.id}`)}&hashtags=${encodeURIComponent("どっとや,pixelgives")}`}
			>
				でシェア
			</ShareButton>
			<ShareButton
				size={22}
				icon="/icons/bluesky.png"
				alt="Blueskyでシェア"
				target="_blank"
				serviceName="Bluesky"
				href={`https://bsky.app/intent/compose?text=${encodeURIComponent(dot.title)} ${encodeURIComponent("#どっとや #dotya #pixelgives")} ${encodeURIComponent(`https://pixel.gives/dot/${dot.id}`)}`}
			>
				でシェア
			</ShareButton>
			<ShareButton
				size={22}
				icon="/icons/pocket.png"
				alt="Pocketで保存"
				target="_blank"
				serviceName="Pocket"
				href={`https://getpocket.com/save?url=${encodeURIComponent(`https://pixel.gives/dot/${dot.id}`)}`}
			>
				で保存
			</ShareButton>
			<ShareButton
				size={20}
				icon="/icons/hatena.png"
				alt="はてなブックマークで保存"
				target="_blank"
				serviceName="はてなブックマーク"
				href={`https://b.hatena.ne.jp/entry/s/pixel.gives/dot/${dot.id}#bbutton`}
			>
				で保存
			</ShareButton>
		</div>

		<GoogleAds slot="9512157076" />

		{
			dot.tags[0] !== undefined && sameTagDots[0] !== undefined && sameTagDots[0].length !== 0 && (
				<div
					class={css`
						display: flex;
						flex-direction: column;
						gap: 40px;
					`}
				>
					<Title>他にも{dot.tags[0].name}のドット絵あるよ！</Title>
					<DotList dots={sameTagDots[0]} />
					{sameTagDots[0].length > 15 && (
						<Button href={`/tags/${dot.tags[0].id}`}>もっと{dot.tags[0].name}のドット絵を見る</Button>
					)}
				</div>
			)
		}

		{
			dot.tags[1] !== undefined && sameTagDots[1] !== undefined && sameTagDots[1].length !== 0 && (
				<div
					class={css`
						display: flex;
						flex-direction: column;
						gap: 40px;
					`}
				>
					<Title>{dot.tags[1].name}のドット絵もどうぞ！</Title>
					<DotList dots={sameTagDots[1]} />
					{sameTagDots[1].length > 15 && (
						<Button href={`/tags/${dot.tags[1].id}`}>もっと{dot.tags[1].name}のドット絵を見る</Button>
					)}
				</div>
			)
		}

		<GoogleAds slot="9512157076" />
	</div>
</Base>
