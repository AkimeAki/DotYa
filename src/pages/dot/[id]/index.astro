---
import Base from "@/layouts/Base.astro";
import Page from "./_page";
import type { DotIllust } from "@/types";
import { getCachedContents } from "@/libs/microcms";
import type { GetStaticPaths } from "astro";
import { dotJsonLd } from "@/libs/jsonld";
import { formatDotList } from "@/libs/format-dotlist";

export const getStaticPaths = (async () => {
	const allDots = await formatDotList(await getCachedContents<DotIllust>("dot"));

	return allDots.map((content) => ({
		params: {
			id: content.id
		},
		props: {
			dot: content,
			sameTag1Dots: allDots.filter((item) => {
				if (item.id === content.id) {
					return false;
				}

				if (content.tags[0] !== undefined) {
					for (const tag of item.tags) {
						if (tag.id === content.tags[0].id) {
							return true;
						}
					}
				}

				return false;
			}),
			sameTag2Dots: allDots.filter((item) => {
				if (item.id === content.id) {
					return false;
				}

				if (content.tags[1] !== undefined) {
					for (const tag of item.tags) {
						if (tag.id === content.tags[1].id) {
							return true;
						}
					}
				}

				return false;
			})
		}
	}));
}) satisfies GetStaticPaths;

const { dot, sameTag1Dots, sameTag2Dots } = Astro.props;

const illust = dot.dot32 ?? dot.dot16;
if (illust === undefined) {
	return;
}

const px = dot.dot32 !== undefined ? 16 : dot.dot16 !== undefined ? 32 : 16;

const schema = [];
if (dot.dot32 !== undefined) {
	schema.push(dotJsonLd(Astro, `${dot.dot32.url}?w=512&q=100&px=${16}`, dot.title));
}

if (dot.dot16 !== undefined) {
	schema.push(dotJsonLd(Astro, `${dot.dot16.url}?w=512&q=100&px=${32}`, dot.title));
}
---

<Base
	title={dot.title}
	ogImage={`${illust}?w=512&q=100&px=${px}`}
	description={`${dot.title}のドット絵です。「どっとや」はドット絵のフリーイラスト素材屋さんです。`}
	publishedAt={dot.publishedAt}
	jsonld={[...schema]}
>
	<Page client:load dot={dot} sameTagDots={[sameTag1Dots, sameTag2Dots]} />
</Base>
