---
import Base from "@/layouts/Base.astro";
import type { DotIllust, DotIllustTag } from "@/types";
import { getCachedContents } from "@/libs/microcms";
import type { GetStaticPaths } from "astro";
import { formatDotList } from "@/libs/format-dotlist";
import { fixedDescription } from "@/define";
import { css } from "@/styled-system/css";
import Title from "@/components/atoms/Title";
import Pagination from "@/components/molecules/Pagination.astro";
import DotList from "@/components/templates/DotList";

export const getStaticPaths = (async () => {
	const response = await getCachedContents<DotIllustTag>("tags");

	return response.map((content) => ({
		params: {
			id: content.id
		},
		props: {
			tag: content
		}
	}));
}) satisfies GetStaticPaths;

const { id } = Astro.params;
if (id === undefined) {
	return;
}

const { tag } = Astro.props;
let dots = (await formatDotList(await getCachedContents<DotIllust>("dot"))).filter((dot) => {
	const tagIds = dot.tags.map((dotTag) => dotTag.id);
	return tagIds.includes(tag.id);
});

const lastPage = Math.ceil(dots.length / 30);
dots.length = 30;
dots = dots.filter(Boolean);
---

<Base
	title={`${tag.name}タグが付いたドット絵一覧`}
	description={`${tag.name}タグが付いたドット絵一覧ページです。${fixedDescription}`}
>
	<div
		class={css`
			display: flex;
			flex-direction: column;
			gap: 40px;
		`}
	>
		<div
			class={css`
				display: flex;
				flex-direction: column;
				gap: 20px;
			`}
		>
			<Title>{tag.name}タグが付いたドット絵 1ページ目</Title>
			<Pagination current={1} last={lastPage} baseUrl={`/tags/${tag.id}/page/`} />
		</div>
		<DotList dots={dots} />
		<Pagination current={1} last={lastPage} baseUrl={`/tags/${tag.id}/page/`} />
	</div>
</Base>
