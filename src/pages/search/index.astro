---
import Base from "@/layouts/Base.astro";
import ThisPage from "./_page";
import type { Lang } from "@/define";
import type { DotIllust, DotIllustTag } from "@/types";
import { getListAllContents } from "@/libs/microcms";
import { formatDotList, type DotData } from "@/libs/format-dotlist";
import { i18n } from "@/libs/i18n";
import { getText } from "@/libs/getI18n";

interface Props {
	lang?: Lang;
}

const { lang = "ja" } = Astro.props;

const { translateData } = await i18n(lang);

export const prerender = false;
const searchText = Astro.url.searchParams.get("q");
let dots: null | DotData[] = null;
if (searchText !== null && searchText !== "") {
	dots = await formatDotList(
		await getListAllContents<DotIllust>("dot", {
			q: searchText
		})
	);

	const tags = await getListAllContents<DotIllustTag>("tags", {
		q: searchText,
		fields: ["id"]
	});

	if (tags.length !== 0) {
		let tagFilter = "";
		for (const tag of tags) {
			tagFilter += `tags[contains]${tag.id}`;
			tagFilter += "[or]";
		}

		tagFilter = tagFilter.replace(/\[or\]$/, "");

		const tagSearchDots = await formatDotList(
			await getListAllContents<DotIllust>("dot", {
				filters: tagFilter
			})
		);

		dots = [...dots, ...tagSearchDots];
		dots = Array.from(new Map(dots.map((dot) => [dot.id, dot])).values());
	}
}
---

<Base
	title={getText(translateData, "search_pageTitle")}
	description={`${getText(translateData, "search_description")}${getText(translateData, "fixedDescription")}`}
	canonical={`${Astro.site}search`}
	lang={lang}
>
	<ThisPage dots={dots} q={searchText ?? ""} lang={lang} translateData={translateData} client:load />
</Base>
